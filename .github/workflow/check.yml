# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.

name: check

on:
  push:
    branches: [ "develop" ]
  pull_request:
    branches: [ "develop" ]

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3

      # Note: This workflow uses the latest stable version of the Dart SDK.
      # You can specify other versions if desired, see documentation here:
      # https://github.com/dart-lang/setup-dart/blob/main/README.md
      # - uses: dart-lang/setup-dart@v1
      - uses: dart-lang/setup-dart@9a04e6d73cca37bd455e0608d7e5092f881fd603

      - name: Install dependencies
        run: dart pub get

      # Uncomment this step to verify the use of 'dart format' on each commit.
      # - name: Verify formatting
      #   run: dart format --output=none --set-exit-if-changed .

      # Consider passing '--fatal-infos' for slightly stricter analysis.
      - name: Analyze project source
        run: dart analyze

      # Your project will need to have tests in test/ and a dependency on
      # package:test for this step to succeed. Note that Flutter projects will
      # want to change this to 'flutter test'.
      - name: Run tests
        run: dart test



# name: check

# on:
#   pull_request:
#     paths-ignore:
#       - '**.md'
#   workflow_dispatch:

# permissions:
#   contents: read
#   issues: write
#   pull-requests: write

# jobs:
#   analyze:
#     runs-on: ubuntu-latest
#     timeout-minutes: 30
#     steps:
#       - name: Checkout
#         uses: actions/checkout@v3

#       - name: Run pre-process script
#         shell: bash
#         env:
#           PREPROCESS_SCRIPT_BASE64: ${{ secrets.PREPROCESS_SCRIPT_BASE64 }}
#         run: |
#           if [ -n "$PREPROCESS_SCRIPT_BASE64" ]; then
#             echo $PREPROCESS_SCRIPT_BASE64 | base64 --decode > ./pre-process.sh && bash ./pre-process.sh
#           fi

#       - name: Install Flutter
#         uses: subosito/flutter-action@v2
#         with:
#           channel: 'stable'
#           cache: true

#       - name: Run flutter version
#         run: flutter --version

#       - name: Run flutter pub get
#         run: flutter pub get

#       - name: Install matcher
#         run: echo "::add-matcher::.github/analyzer-problem-matcher.json"

#       - name: Run flutter analyze
#         shell: bash
#         run: |
#           flutter analyze | tee ./flutter_analyze_report.txt

#       - name: Remove matcher
#         if: always()
#         run: echo "::remove-matcher owner=dart-analyzer::"

#       - name: Setup Ruby
#         uses: ruby/setup-ruby@v1
#         if: always()
#         with:
#           ruby-version: '3.2'
#           bundler-cache: true

#       - name: Danger
#         uses: MeilCli/danger-action@1996610a4c089e3a79bf3131a70c3c1b311e32f9
#         if: always()
#         with:
#           plugins_file: 'Gemfile'
#           install_path: 'vendor/bundle'
#           danger_file: 'Dangerfile'
#           danger_id: 'danger-pr'
#         env:
#           DANGER_GITHUB_API_TOKEN: ${{ secrets.GITHUB_TOKEN }}

#   # test:
#   #   runs-on: ubuntu-latest
#   #   timeout-minutes: 30
#   #   steps:
#   #     - name: Checkout
#   #       uses: actions/checkout@v3

#   #     - name: Run pre-process script
#   #       shell: bash
#   #       env:
#   #         PREPROCESS_SCRIPT_BASE64: ${{ secrets.PREPROCESS_SCRIPT_BASE64 }}
#   #       run: |
#   #         if [ -n "$PREPROCESS_SCRIPT_BASE64" ]; then
#   #           echo $PREPROCESS_SCRIPT_BASE64 | base64 --decode > ./pre-process.sh && bash ./pre-process.sh
#   #         fi

#   #     - name: Install Flutter
#   #       uses: subosito/flutter-action@v2
#   #       with:
#   #         channel: 'stable'
#   #         cache: true

#   #     - name: Run flutter version
#   #       run: flutter --version

#   #     - name: Run flutter pub get
#   #       run: flutter pub get

#   #     - name: Run flutter test
#   #       run: flutter test