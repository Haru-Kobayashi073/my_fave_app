# ワークフロー名を定義(任意の名称)
name: flutter analyze

# トリガーを定義
on:
  # プルリク作成がトリガー(GitHub Actionsが実行される)となる
  pull_request:
    # プルリク作成時とプルリクにコミットが行われた時
    types: [opened, synchronize]
    # 対象ブランチを指定
    branches:
      - develop

  # GitHubページから手動で実行できる
  workflow_dispatch:

# 実行するジョブを定義
jobs:
  # ジョブ名を設定
  flutter_analyze:

    # ジョブを実行する仮想ホストマシンタイプ
    runs-on: ubuntu-latest

    # タイムアウト時間を設定
    timeout-minutes: 5

    # steps配下に実行したいアクションを定義します。(usesもしくはrunを使用することになると思います)
    # uses ・・・ GitHubやサードパーティで用意されているactionを使用できます
    # run ・・・ 実行コマンド
    steps:
    # 該当リポジトリにチェックアウト
      - name: checkout
        uses: actions/checkout@v4

      # flutterインストール（キャッシュする）
      - name: flutter cache
        uses: subosito/flutter-action@v2
        with:
          flutter-version: "3.16.0"
          channel: "stable"
          cache: true
          cache-key: flutter
          cache-path: ${{ runner.tool_cache }}/flutter

      - name: install Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: "3.16.0"
          channel: "stable"

      - name: Run flutter version
        run: flutter --version

      - name: Run flutter pub get
        run: flutter pub get

      - name: Install matcher
        run: echo "::add-matcher::.github/analyzer-problem-matcher.json"

      - name: Run flutter analyze
        shell: bash
        run: |
          flutter analyze | tee ./flutter_analyze_report.txt

      - name: Remove matcher
        if: always()
        run: echo "::remove-matcher owner=dart-analyzer::"

      - name: Setup Ruby
        uses: ruby/setup-ruby@v1
        if: always()
        with:
          ruby-version: '3.2'
          bundler-cache: true

      - name: Danger
        uses: MeilCli/danger-action@1996610a4c089e3a79bf3131a70c3c1b311e32f9
        if: always()
        with:
          plugins_file: 'Gemfile'
          install_path: 'vendor/bundle'
          danger_file: 'Dangerfile'
          danger_id: 'danger-pr'